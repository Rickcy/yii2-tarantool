create function ex() returns trigger
    language plpgsql
as
$$
BEGIN
    IF (TG_OP = 'DELETE') THEN
        RETURN OLD;
    ELSIF (TG_OP = 'UPDATE') THEN
        RETURN NEW;
    ELSIF (TG_OP = 'INSERT') THEN
        INSERT into texts values (TG_LEVEL);
        RETURN NEW;
    END IF;
    RETURN NULL;
END;
$$;



create function tarantool_insert(tablename text, tuple text[]) returns void
    language plpython3u
as
$$
import tarantool
import os
from dotenv import load_dotenv
env_path = os.getenv("PROJECT_PATH") + '.env'
load_dotenv(dotenv_path=env_path)
host = os.getenv("TARANTOOL_HOST")
port = os.getenv("TARANTOOL_PORT")
conn = tarantool.connect(host, port)
space = conn.space(tablename)
space.insert(tuple)
$$;

create function tarantool_delete(tablename text, id text) returns boolean
    language plpython3u
as
$$
import tarantool
import os
from dotenv import load_dotenv
import getpass
username = getpass.getuser()
print(username)
env_path = os.getenv("PROJECT_PATH") + '.env'
load_dotenv(dotenv_path=env_path)
host = os.getenv("TARANTOOL_HOST")
port = os.getenv("TARANTOOL_PORT")
conn = tarantool.connect(host, port)
space = conn.space(tablename)
isDelete = space.delete(id)
return True
$$;