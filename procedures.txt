Оптимизировать
Если нет что писать в базу не нужно писать в тарантул

create or replace function execute_tarantool() returns trigger
    language plpgsql
as
$$
DECLARE
    valueNew text;
    valNew   text;
    keyNew   text;
    result   text[];
BEGIN
    IF (TG_OP = 'DELETE') THEN
        PERFORM tarantool_delete(TG_TABLE_NAME, OLD.id::text);
        return OLD;
    ELSIF (TG_OP = 'UPDATE') THEN
        valueNew := row_to_json(new);
        FOR keyNew,valNew IN SELECT * FROM json_each_text(valueNew::json)
            LOOP
                result := array_append(result, valNew);
            END LOOP;
        PERFORM tarantool_update(TG_TABLE_NAME, result);
        RETURN NEW;
    ELSIF (TG_OP = 'INSERT') THEN
        valueNew := row_to_json(new);
        FOR keyNew,valNew IN SELECT * FROM json_each_text(valueNew::json)
            LOOP
                result := array_append(result, valNew);
            END LOOP;
        PERFORM tarantool_insert(TG_TABLE_NAME, result);
        return NEW;
    END IF;
    RETURN NULL;
EXCEPTION
    WHEN others THEN
        RAISE NOTICE 'SQLSTATE: %', SQLSTATE;
        RAISE;
END;
$$;
----------------------------------------------------------------------

CREATE OR REPLACE function tarantool_update(tablename text, tuple text[]) returns boolean
    language plpython3u
as
$$
try:
    import tarantool
    import os
    from dotenv import load_dotenv
    env_path = os.getenv("PROJECT_PATH") + '.env'
    load_dotenv(dotenv_path=env_path)
    host = os.getenv("TARANTOOL_HOST")
    port = os.getenv("TARANTOOL_PORT")

    conn = tarantool.connect(host, port)
    space = conn.space(tablename)
    space.replace(tuple)
    conn.close()
    return True
except Exception as error:
    plpy.error(format(error))
$$;

------------------------------------------------------------------------

create or replace function tarantool_delete(tablename text, id text) returns boolean
    language plpython3u
as
$$
try:
    import tarantool
    import os
    from dotenv import load_dotenv
    env_path = os.getenv("PROJECT_PATH") + '.env'
    load_dotenv(dotenv_path=env_path)
    host = os.getenv("TARANTOOL_HOST")
    port = os.getenv("TARANTOOL_PORT")
    conn = tarantool.connect(host, port)
    space = conn.space(tablename)
    isDelete = space.delete(id)
    conn.close()
    return True
except Exception as error:
    plpy.error(format(error))
$$;
----------------------------------------------------------------------
create or replace function tarantool_insert(tablename text, tuple text[]) returns boolean
    language plpython3u
as
$$
try:
    import tarantool
    import os
    from dotenv import load_dotenv
    env_path = os.getenv("PROJECT_PATH") + '.env'
    load_dotenv(dotenv_path=env_path)
    host = os.getenv("TARANTOOL_HOST")
    port = os.getenv("TARANTOOL_PORT")

    conn = tarantool.connect(host, port)
    space = conn.space(tablename)
    space.insert(tuple)
    conn.close()
    return True
except Exception as error:
    plpy.error(format(error))
$$;

-----------------------------------------------------------------------

CREATE TRIGGER execute_tarantool AFTER INSERT OR UPDATE OR DELETE ON announcements
    FOR EACH ROW EXECUTE PROCEDURE execute_tarantool();
